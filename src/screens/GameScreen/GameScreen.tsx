import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Card as CardUI, CardContent } from "../../components/ui/card";
import { Card } from "../../types/cards";
import { loadCards } from "../../utils/loadCards";
import confetti from 'canvas-confetti';
import cork from '../../assets/cork.svg';
import camberLogo from '../../assets/camber-logo-bone.png';

export const GameScreen = (): JSX.Element => {
  const [cards, setCards] = useState<Card[]>([]);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [seenCards, setSeenCards] = useState<Card[]>([]);

  useEffect(() => {
    const initializeCards = async () => {
      try {
        const loadedCards = await loadCards();
        setCards(loadedCards);
        setIsLoading(false);
      } catch (error) {
        console.error('Error loading cards:', error);
        setIsLoading(false);
      }
    };

    initializeCards();
  }, []);

  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.code === 'Space' || event.code === 'ArrowRight' || event.code === 'ArrowUp') {
        handleNextCard();
      } else if (event.code === 'Backspace' || event.code === 'ArrowLeft' || event.code === 'ArrowDown') {
        if (currentCardIndex > 0) {
          setSeenCards(prev => prev.slice(0, -1));
          setCurrentCardIndex(prev => prev - 1);
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [currentCardIndex, cards.length]);

  const handleNextCard = () => {
    if (currentCardIndex < cards.length - 1) {
      const currentCard = cards[currentCardIndex];
      setSeenCards(prev => [...prev, currentCard]);
      setCurrentCardIndex(prev => prev + 1);
    }
  };

  const handlePreviousCard = () => {
    if (currentCardIndex > 0) {
      setSeenCards(prev => prev.slice(0, -1));
      setCurrentCardIndex(prev => prev - 1);
    }
  };

  const triggerConfetti = (e: React.MouseEvent<HTMLButtonElement>) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const buttonTop = rect.top / window.innerHeight;

    const count = 5;
    const defaults = {
      particleCount: 150,
      spread: 100,
      startVelocity: 45,
      ticks: 100,
      origin: { y: buttonTop }
    };

    function fire(particleRatio: number, opts: any) {
      confetti({
        ...defaults,
        ...opts,
        particleCount: Math.floor(defaults.particleCount * particleRatio)
      });
    }

    for (let i = 0; i < count; i++) {
      fire(0.25, {
        spread: 26,
        startVelocity: 55,
        origin: { x: 0.2 + (i * 0.15), y: buttonTop }
      });
      fire(0.2, {
        spread: 60,
        origin: { x: 0.3 + (i * 0.1), y: buttonTop }
      });
      fire(0.35, {
        spread: 100,
        decay: 0.91,
        scalar: 0.8,
        origin: { x: 0.4 + (i * 0.08), y: buttonTop }
      });
      fire(0.1, {
        spread: 120,
        startVelocity: 25,
        decay: 0.92,
        scalar: 1.2,
        origin: { x: 0.5 + (i * 0.06), y: buttonTop }
      });
    }
  };

  const preventContextMenu = (e: React.MouseEvent) => {
    e.preventDefault();
  };

  if (isLoading) {
    return (
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="bg-[#D46235] flex flex-row justify-center w-full h-screen"
      >
        <div className="flex items-center justify-center">
          <div className="text-white text-2xl">Loading cards...</div>
        </div>
      </motion.div>
    );
  }

  const currentCard = cards[currentCardIndex];
  const progress = ((currentCardIndex + 1) / cards.length) * 100;

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
      className="relative w-full h-screen overflow-hidden select-none bg-[#D46235]"
      onContextMenu={preventContextMenu}
    >
      {/* Progress bar */}
      <div className="absolute top-0 left-1/2 -translate-x-1/2 w-2/3 md:w-1/2 h-1 bg-white/20">
        <motion.div
          className="h-full bg-white"
          initial={{ width: 0 }}
          animate={{ width: `${progress}%` }}
          transition={{ duration: 0.3 }}
        />
      </div>

      {/* Camber Logo */}
      <div className="absolute top-4 left-1/2 -translate-x-1/2 z-20">
        <img 
          src={camberLogo} 
          alt="Camber"
          className="w-[80px]"
        />
      </div>

      {/* Game surface with SVG background */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="relative w-full max-w-[1440px] h-full p-[6%] md:p-[4%]">
          <svg className="absolute inset-0 w-full h-full" viewBox="0 0 1387 937" fill="none" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet">
            <g opacity="0.27">
              <path d="M1189.44 722.368C1189.64 730.478 1185.56 734.952 1181.81 739.542C1185.55 734.959 1189.64 730.478 1189.44 722.368Z" fill="#EAE6E4"/>
              <path d="M1274 923C1274.44 922.898 1279.56 922.595 1280 922.5C1283.5 922.5 1282.5 922.5 1286 922.5C1274.6 907.41 1283.98 917.756 1273.1 902.286C1250.6 870.306 1228.1 838.318 1205.9 806.134C1197.9 794.541 1190.72 782.38 1182.69 769.716C1217.48 756.768 1232.83 728.146 1245.65 695.714C1248.01 698.352 1249.69 700.078 1251.21 701.937C1281.11 738.529 1264.5 723.869 1294.5 760.374C1301.86 769.329 1308.45 779.931 1317.83 785.95C1320.95 787.946 1331.4 800.683 1333 803C1333.12 800.894 1326.77 789.106 1327 787C1326 785 1325.5 783 1324.5 780.5C1323.6 779.866 1324.05 778.656 1323.58 777.906C1322.18 776.667 1321.02 775.625 1319.99 774.481C1308.91 762.218 1297.74 750.035 1286.89 737.568C1262.92 710.003 1285.51 733.626 1261.67 705.959C1255.52 698.818 1251.57 690.278 1246.77 682.409C1239.3 670.153 1226.9 660.892 1216.43 650.523C1215.4 649.496 1212.58 648.65 1211.78 649.27C1205.47 654.152 1202.14 648.905 1198.75 645.408C1180.41 626.441 1162.56 606.979 1143.85 588.391C1138.8 583.37 1138.41 579.698 1140.31 573.315C1145.33 556.41 1149.54 539.251 1153.58 522.076C1155.39 514.367 1151.52 507.248 1145.01 504.727C1140.39 502.942 1133.31 504.895 1128.36 507.299C1123.11 509.849 1118.92 514.746 1114.55 518.914C1107.66 525.479 1100.52 531.432 1090.99 532.795C1088.73 512.545 1087.55 492.77 1083.95 473.453C1081.83 462.108 1084.6 456.104 1094.35 450.617C1111.04 441.232 1124.07 427.257 1128.72 408.662C1133.31 390.292 1134.88 371.092 1136.78 352.155C1137.81 341.844 1136.02 331.264 1136.93 320.925C1137.5 314.36 1135.45 311.685 1129.57 310.767C1120.39 309.339 1111.24 307.845 1102.05 306.468C1064.77 300.872 1027.62 298.985 990.826 310.097C986.177 311.503 984.407 313.179 983.846 318.156C981.529 338.952 984.895 359.092 990.054 379.035C991.934 386.307 995.322 393.171 997.391 400.406C1007.72 436.584 1032.51 452.891 1068.47 458.851C1073.93 459.755 1076.09 461.248 1076.44 466.524C1077.54 482.751 1078.97 498.956 1080.03 515.183C1080.41 520.983 1080.09 526.827 1080.09 533.859C1075.65 529.552 1072.78 526.273 1069.43 523.614C1059.46 515.701 1049.83 506.957 1036.01 506.607C1027.77 506.396 1023.87 510.381 1025.54 518.462C1026.54 523.286 1029.18 527.774 1031.08 532.409C1012.11 533.771 1009.13 539.535 1018.81 557.11C1009.6 565.416 1018.22 573.184 1020.93 582.758C1017.14 581.112 1014.67 579.88 1012.1 578.947C1006.4 576.885 1000.73 574.597 994.87 573.111C988.451 571.479 984.356 573.832 983.314 581.053C982.09 589.564 984.305 596.69 992.48 599.583C1009.09 605.463 1025.75 611.948 1042.95 615.14C1056.58 617.668 1071.04 615.65 1085.24 615.65C1087.3 622.018 1086.8 625.501 1079.36 627.177C1069.25 629.458 1059.47 633.327 1049.64 636.773C1044.7 638.507 1038.33 640.854 1040.91 647.208C1042.06 650.02 1048.83 650.567 1053.07 652.068C1053.56 652.243 1054.22 651.973 1054.79 651.9C1069.17 650.013 1083.52 647.856 1097.94 646.45C1100.92 646.158 1105.68 647.725 1107.06 649.998C1118.92 669.548 1130.14 689.484 1141.67 709.238C1144.75 714.513 1147.7 719.22 1144.72 726.011C1141.43 733.509 1144.62 739.542 1151.84 743.339C1153.8 744.366 1155.71 745.51 1157.46 746.508C1152.77 765.679 1154.92 768.703 1173.08 770.823C1175.31 771.085 1177.86 773.505 1179.2 775.603C1199.89 808.094 1219.88 841.043 1241.13 873.17C1257.6 898.082 1255.83 896.605 1273.1 921C1273.98 922.246 1273.08 920.78 1274 922.5V923ZM990.032 319.409C1029.12 306.68 1068.55 309.995 1110.62 317.267C1090.88 322.397 1004.31 324.298 990.032 319.409ZM1051.82 355.259C1047.75 356.242 1043.07 356.658 1039.07 355.696C1020.26 351.164 1007.91 355.907 996.109 372.236C994.2 358.042 992.284 343.855 990.44 330.179C1036.29 328.852 1081.24 327.548 1128.01 326.193C1127.4 335.651 1126.72 346.333 1126.03 357.008L1124.31 358.407C1124.2 357.598 1124.15 356.774 1123.97 355.987C1121.37 345.415 1112.26 339.855 1101.27 342.58C1084.76 346.683 1068.36 351.273 1051.82 355.259ZM1030.43 516.378C1034.04 515.701 1038.16 513.558 1041.17 514.6C1056.77 520 1069.19 529.501 1076.79 544.293C1076.28 545.379 1075.77 546.464 1075.26 547.543C1071.6 546.763 1067.49 546.778 1064.35 545.058C1054.75 539.79 1045.15 534.347 1036.32 527.913C1033.21 525.647 1032.33 520.313 1030.43 516.378ZM1020.77 546.333C1019.97 545.699 1020.85 541.225 1021.18 541.196C1026.18 540.788 1031.54 539.68 1036.16 541.014C1043.28 543.076 1049.86 546.952 1056.73 549.925C1062.18 552.279 1067.71 554.436 1073.21 556.68C1073.33 557.605 1073.46 558.531 1073.58 559.449C1068.78 559.449 1063.9 560.003 1059.2 559.325C1050.7 558.108 1042.31 556.155 1033.87 554.516C1033.59 554.465 1033.23 554.574 1033.02 554.443C1028.88 551.813 1024.58 549.372 1020.77 546.333ZM1084.01 606.133C1063.72 610.695 1042.98 608.851 1022.49 602.476C1013.95 599.816 1005.42 597.069 997.034 593.972C994.746 593.127 992.495 591.174 991.147 589.127C990.039 587.444 989.383 584.347 990.229 582.846C990.892 581.673 994.404 581.214 996.247 581.775C1002.32 583.618 1008.08 586.62 1014.22 588.165C1026.23 591.189 1038.39 593.659 1050.56 596.049C1052.75 596.479 1055.22 595.459 1057.97 593.834C1041.21 590.482 1024.77 587.407 1022.3 566.466C1032.8 560.68 1060.4 565.978 1068.49 576.871C1061.88 576.871 1056.71 577.14 1051.58 576.769C1048.45 576.543 1045.37 574.685 1042.31 574.78C1039.4 574.867 1036.53 576.528 1033.66 577.505C1035.69 579.45 1037.44 582.525 1039.81 583.115C1046.22 584.704 1052.89 585.979 1059.46 586.037C1074.41 586.168 1077.6 581.804 1073.89 567.165C1076.54 565.875 1079.3 564.527 1084.01 562.24V606.141V606.133ZM1052.96 644.643C1071.88 632.314 1086.05 630.07 1090.89 639.571C1078.61 641.211 1067.01 642.763 1052.96 644.643ZM1112.69 645.218C1118.94 644.111 1124.94 643.448 1130.68 641.867C1133.48 641.094 1135.81 638.609 1138.34 636.904C1135.75 634.82 1133.28 631.134 1130.56 630.944C1120.24 630.237 1109.84 630.66 1097.23 630.66C1094.51 610.731 1091.61 589.44 1088.6 567.333C1093.54 567.092 1097.45 566.903 1102.15 566.677C1101.38 576.703 1095.12 588.041 1109.06 594.504C1104.14 583.094 1104.77 572.331 1112.09 562.618C1115.56 558.021 1120.41 554.443 1123.74 549.765C1126.6 545.757 1128.2 540.839 1130.36 536.329C1129.3 535.702 1128.25 535.075 1127.19 534.449C1125.37 536.372 1123.65 538.405 1121.72 540.212C1115.43 546.107 1109.59 552.738 1102.47 557.394C1099.4 559.398 1093.62 557.248 1089.08 556.986C1090.27 552.541 1090.88 547.827 1092.86 543.768C1093.97 541.473 1097.41 540.373 1099.66 538.558C1106.78 532.831 1113.87 527.075 1120.9 521.238C1124.45 518.295 1127.42 514.331 1131.4 512.349C1135.15 510.491 1141 508.742 1143.88 510.432C1146.84 512.174 1149.18 518.448 1148.56 522.193C1146.36 535.301 1142.97 548.228 1139.62 561.11C1137.89 567.792 1134.95 574.168 1133.28 580.857C1132.67 583.305 1133.21 587.087 1134.79 588.879C1156.94 614.054 1179.4 638.966 1201.64 664.061C1202.87 665.453 1203.99 668.455 1203.32 669.803C1193.63 689.324 1183.56 708.64 1165.44 722.04C1164.33 722.863 1163.02 723.446 1161.59 724.27C1145.31 697.965 1129.24 671.996 1112.67 645.218H1112.69ZM1164.78 760.374C1166.58 751.048 1174.56 742.544 1161.25 736.416C1190.24 717.289 1204.46 688.865 1216.6 656.767C1224.36 665.635 1231.2 673.045 1237.45 680.929C1238.87 682.707 1239.17 686.46 1238.37 688.733C1231.79 707.445 1222.66 724.955 1209.15 739.506C1202.38 746.8 1194.1 753.255 1185.35 757.941C1179.99 760.819 1172.46 759.631 1164.78 760.374Z" fill="#EAE6E4"/>
            </g>
            <path opacity="0.28" d="M55.0849 15.4403C54.5763 15.2051 53.4692 14.7851 53.17 14.6507L55.1149 16.2298L54.8755 15.9107L55.5637 19.3376L55.7133 18.8001L50.8362 22.143C62.7746 20.9503 73.4563 22.311 85.1254 23.5374C96.7945 24.7637 108.942 25.1668 120.971 25.2172C133.029 25.2676 145.057 25.0157 157.115 25.1836C169.173 25.3516 181.201 26.0236 193.199 26.8467C216.777 28.4594 239.936 30.2401 263.753 29.1482C287.689 28.0395 311.147 25.1164 334.964 23.4534C382.209 20.144 429.933 21.1519 477.387 21.3031C524.841 21.4543 575.647 21.3871 624.747 21.3535C649.402 21.3367 673.907 21.7063 698.502 22.6134C723.096 23.5206 746.494 24.5453 770.551 24.7637C795.146 24.9821 819.681 25.0157 844.276 25.5868C868.871 26.158 893.316 26.9139 917.821 27.5523C966.622 28.8122 1015.36 30.6433 1064.19 31.8024C1113.02 32.9615 1162.24 33.0623 1211.28 32.3736C1235.58 32.0376 1259.88 31.584 1284.17 30.9121C1296.08 30.5761 1308.08 30.4081 1319.96 29.7697C1330.94 29.1818 1341.86 28.2074 1352.87 28.0395C1357.39 27.9723 1362.41 27.8547 1366.84 28.4258C1370.16 28.8626 1371.78 29.5514 1373.22 30.8281C1374.47 31.92 1372.74 30.1393 1373.66 31.3488C1373.99 31.752 1374.26 32.1552 1374.53 32.5752C1374.02 31.6848 1374.71 33.1463 1374.74 33.1799C1374.92 33.6503 1375.07 34.1039 1375.19 34.5742C1375.61 36.1197 1375.1 33.6335 1375.31 35.2126C1375.37 35.6997 1375.43 36.2037 1375.46 36.6909C1375.55 37.85 1375.55 38.9923 1375.52 40.1515C1375.13 52.0619 1372.47 63.9387 1369.68 75.7315C1366.48 89.2882 1362.98 102.828 1361.22 116.486C1359.45 130.143 1358.85 143.901 1358.73 157.626C1358.61 171.351 1356.91 185.26 1355.65 199.069C1354.4 212.878 1354.04 226.602 1354.78 240.394C1355.53 254.186 1357.12 266.886 1359.18 280.09C1361.25 293.294 1364.63 307.304 1365.97 320.962C1367.32 334.619 1367.02 347.336 1364.81 360.456C1362.59 373.576 1357.57 387.418 1353.74 400.908C1349.91 414.397 1346.65 426.509 1340.54 439.041C1334.44 451.573 1326.66 464.928 1321.18 478.098C1310.29 504.372 1306.01 531.418 1301.88 558.229C1299.76 572.071 1296.32 586.065 1296.68 599.991C1296.86 606.778 1297.73 613.548 1298.2 620.335C1298.68 627.121 1298.5 633.522 1298.74 640.124C1299.25 653.916 1300.9 667.64 1303.08 681.382C1305.27 695.123 1306.82 708.646 1308.98 722.253C1311.13 735.861 1313.94 749.552 1318.22 763.075C1322.5 776.598 1327.86 789.667 1333.15 802.905C1338.45 816.142 1342.61 828.607 1347.3 841.475C1352 854.343 1357.75 866.825 1361.82 879.642C1363.94 886.278 1365.2 891.301 1365.88 897.617C1366.15 900.238 1366.36 902.858 1366.12 905.479C1366.3 903.665 1366.06 905.647 1366 905.932C1365.88 906.537 1365.77 907.159 1365.62 907.763C1365.32 909.023 1364.93 910.267 1364.45 911.51C1364.42 911.61 1363.49 913.626 1364.15 912.282C1363.85 912.87 1363.55 913.475 1363.22 914.046C1362.89 914.618 1362.53 915.172 1362.14 915.726C1362.02 915.877 1360.59 917.524 1361.76 916.314C1361.31 916.785 1360.89 917.255 1360.32 917.675C1361.43 916.818 1359.63 917.994 1359.45 918.095C1357.57 918.985 1360.62 917.86 1358.37 918.448C1357.27 918.733 1356.13 918.985 1354.96 919.17C1352.81 919.489 1347.57 919.624 1344.25 919.691C1339.37 919.792 1334.59 920.01 1329.74 920.346C1283 923.588 1235.76 923.219 1188.78 922.748C1141.81 922.278 1092.77 922.412 1044.74 922.278C995.076 922.143 945.408 921.807 895.739 921.673C846.879 921.539 798.108 921.119 749.277 920.279C700.596 919.439 651.855 918.666 603.144 919.439C553.894 920.228 504.794 920.38 455.545 919.909C406.445 919.439 357.405 919.086 308.275 919.304C261.748 919.506 215.46 919.12 169.143 916.449C151.131 915.407 133.059 913.878 116.572 909.259C100.086 904.639 87.19 894.828 76.7775 885.69C71.1524 880.734 65.8564 875.963 62.2659 870.991C61.7872 870.336 61.3384 869.664 60.9195 868.992C60.9195 868.975 59.6329 866.741 60.3211 868.051C59.603 866.69 59.0046 865.296 58.466 863.902C57.9274 862.507 57.4786 861.096 57.1196 859.685C56.94 858.98 56.7605 858.257 56.6109 857.552C56.9101 859.08 56.4314 856.225 56.3715 855.956C55.5338 849.942 55.7133 843.911 56.0424 837.897C56.192 835.31 55.803 839.275 56.1621 836.688C56.2818 835.881 56.4015 835.092 56.5211 834.285C56.7904 832.689 57.1196 831.093 57.5085 829.498C58.3164 826.02 59.3337 822.576 60.4408 819.133C62.5651 812.48 64.9887 805.861 66.8737 799.192C68.7588 792.523 69.6863 786.207 70.5839 779.672C72.5886 765.494 73.9949 751.282 74.324 737.07C74.6531 722.858 72.2595 710.091 69.5965 696.585C66.9336 683.078 65.5273 670.026 63.1935 656.771C58.3164 628.936 51.3149 603.334 47.904 575.683C46.2284 561.975 45.2709 548.234 45.3906 534.509C45.4505 527.622 45.7497 520.734 46.378 513.846C46.9166 507.866 47.7544 501.818 48.8614 495.132C51.1653 481.324 54.1873 467.582 56.5211 453.774C58.855 439.965 60.2912 425.283 61.4282 411.004C63.5825 383.638 66.0659 356.223 63.9415 328.824C62.8644 315.065 59.3337 301.408 54.7558 287.901C50.2079 274.479 44.493 261.174 40.3938 247.702C32.3152 221.025 28.9342 195.592 24.1169 168.327C19.2997 141.062 16.8761 113.966 17.5044 86.718C17.654 80.116 17.9832 73.514 18.5217 66.9121C19.0603 60.3101 19.5989 55.1361 20.5863 48.3325C21.5737 41.529 22.7107 35.2126 23.5185 28.6442C24.3264 22.0759 25.0146 15.5579 26.4208 9.05671C27.0492 6.06651 25.972 1.46362 20.1075 0.237297C14.2431 -0.989022 10.473 2.80753 9.90455 5.44495C8.46836 12.2149 7.63057 19.0185 6.67311 25.8052C5.71564 32.592 4.39913 39.4459 3.47159 46.283C1.43697 60.2933 0.329903 74.4212 0.0606155 88.549C-0.448038 116.082 2.27475 143.565 7.092 170.948C11.9691 198.632 15.769 226.417 24.2965 253.85C28.4854 267.323 34.2302 280.611 38.6884 294.05C40.9025 300.753 42.8773 307.489 44.3135 314.259C44.4032 314.662 44.493 315.065 44.5827 315.468C44.5528 315.284 44.4331 314.645 44.5827 315.519C44.7323 316.325 44.882 317.148 45.0316 317.955C45.3308 319.719 45.6001 321.482 45.8095 323.246C46.2284 326.69 46.4977 330.117 46.6772 333.561C48.3228 361.212 45.7497 388.947 43.3859 416.564C43.0867 420.041 42.7875 423.502 42.4285 426.979C42.2489 428.643 42.0993 430.306 41.8899 431.985C41.9796 431.162 41.7702 433.077 41.7403 433.329C41.6206 434.304 41.5009 435.278 41.3812 436.252C40.5135 443.174 39.4064 450.095 38.1498 456.999C35.6364 470.791 32.6444 484.549 30.6397 498.358C26.6004 526.362 27.2885 554.433 31.2082 582.436C33.1829 596.547 35.9057 610.625 39.0175 624.669C42.1292 638.713 44.6127 650.287 46.8567 664.281C49.1008 678.274 50.9858 691.293 53.6188 704.783C56.2519 718.272 57.1495 731.862 56.4613 745.554C56.2818 749.014 56.0424 752.458 55.7432 755.918C55.5936 757.581 55.444 759.228 55.2944 760.891C55.2046 761.714 55.1149 762.554 55.055 763.377C55.0251 763.797 54.9653 764.2 54.9353 764.62C54.9353 764.839 54.7857 765.897 54.8755 765.107C54.0976 772.012 53.17 778.916 52.0031 785.804C49.6992 799.243 43.5654 812.346 40.4238 825.701C37.2821 839.056 36.8931 852.327 40.7828 865.246C44.6725 878.164 56.2818 889.47 69.2973 900.103C81.3853 909.981 95.2087 919.12 114.956 924.21C132.221 928.645 151.579 930.14 170.28 931.181C217.166 933.802 263.992 934.104 311.057 933.852C360.666 933.6 410.215 933.97 459.823 934.407C484.688 934.625 509.552 934.793 534.386 934.709C559.25 934.642 584.025 934.087 608.889 933.735C658.318 933.029 707.777 933.869 757.176 934.675C806.546 935.498 855.855 935.751 905.224 935.868C954.893 936.002 1004.56 936.288 1054.23 936.372C1102.61 936.456 1150.96 936.406 1199.38 936.826C1223.25 937.027 1247.16 937.128 1271.04 936.708C1282.85 936.49 1294.7 936.154 1306.49 935.633C1317.53 935.129 1328.54 934.071 1339.58 933.735C1347.9 933.483 1357.42 933.869 1364.81 931.332C1374.29 928.073 1377.58 921.623 1379.98 915.877C1384.94 903.866 1381.95 891.099 1378.45 879.088C1374.71 866.22 1368.97 853.587 1364.12 840.854C1359.27 828.12 1354.99 814.698 1349.79 801.695C1344.58 788.693 1339.05 775.237 1334.65 761.899C1330.25 748.56 1327.35 735.575 1325.16 722.388C1322.98 709.201 1321.24 695.123 1319.06 681.516C1316.87 667.909 1315.08 654.05 1314.48 640.258C1314.18 633.387 1314.3 626.517 1313.79 619.646C1313.28 612.775 1312.39 606.089 1312.21 599.302C1311.85 586.182 1315.11 572.794 1317.14 559.422C1321.24 532.224 1325.4 504.674 1336.8 478.082C1342.25 465.398 1349.58 452.984 1355.26 440.335C1361.25 426.963 1364.33 413.356 1368.1 399.732C1371.84 386.158 1376.12 372.753 1377.91 359.045C1379.71 345.337 1379.92 331.293 1378.18 317.434C1376.45 303.575 1373.16 290.236 1371.03 276.613C1368.91 262.989 1367.35 249.617 1366.69 236.077C1365.35 208.275 1370.37 180.59 1370.58 152.805C1370.67 139.164 1371.42 125.507 1373.6 111.916C1375.79 98.326 1379.56 84.7693 1382.49 71.1958C1383.96 64.4258 1385.21 57.6391 1386.02 50.8187C1386.59 45.9807 1387.31 41.0586 1386.86 36.2037C1386.44 31.752 1385.15 26.8635 1380.43 23.1342C1375.04 18.8841 1366.93 18.1113 1358.17 17.8929C1347.15 17.6073 1336.2 18.4473 1325.28 18.9849C1313.67 19.5728 1302 19.7408 1290.36 19.976C1265.56 20.48 1240.79 21.0343 1215.98 21.4039C1166.43 22.143 1116.91 22.1094 1067.36 20.9671C1017.82 19.8248 968.327 17.9265 918.778 16.6498C894.243 16.0115 869.738 15.2387 845.203 14.6675C820.668 14.0964 796.073 13.9956 771.508 13.8108C746.943 13.626 722.468 12.5341 697.963 11.6437C673.368 10.7366 648.863 10.367 624.208 10.367C574.6 10.4006 525.021 10.4342 475.412 10.367C427.24 10.3166 378.738 9.42629 330.865 13.122C307.108 14.9531 283.59 17.8929 259.623 18.9681C235.657 20.0432 211.66 18.0441 187.634 16.633C176.115 15.9611 164.565 15.5075 152.986 15.4907C141.406 15.4739 129.857 15.7763 118.308 15.7763C106.758 15.7763 95.2087 15.5075 83.9286 14.2476C72.6484 12.9877 61.847 11.9461 50.3575 13.1892C47.4551 13.5084 45.8693 14.9363 45.4804 16.5322C44.7623 19.4552 46.1386 21.4039 50.1181 23.1678C56.8503 26.1244 60.1116 17.6913 55.0251 15.4067L55.0849 15.4403Z" fill="#EAE6E4"/>
          </svg>

          {/* Card UI - restored to original structure */}
          <CardUI 
            className="w-full max-w-[1440px] h-full relative border-none cursor-pointer mx-auto bg-transparent select-none"
            onClick={handleNextCard}
          >
            <CardContent className="flex flex-col items-center justify-center h-full p-0 relative">
              {/* Stack of seen cards */}
              <div className="relative w-full h-full flex items-center justify-center">
                {seenCards.map((card, index) => (
                  <div
                    key={`seen-${card.id}`}
                    className="absolute select-none"
                    style={{
                      transform: `scale(${0.95 - (seenCards.length - index) * 0.01}) 
                                 translateY(${-(seenCards.length - index) * 2}px) 
                                 rotate(${card.rotation}deg)`,
                      zIndex: index,
                    }}
                  >
                    <img
                      src={card.imagePath}
                      alt={`Card ${card.id}`}
                      className="w-full max-w-[60vw] md:max-w-[50vw] max-h-[50vh] md:max-h-[60vh] object-contain rounded-[15px] shadow-lg select-none"
                      style={{
                        imageRendering: 'crisp-edges',
                        filter: 'contrast(1.1) saturate(1.05)',
                      }}
                      draggable="false"
                    />
                  </div>
                ))}

                {/* Current card */}
                {currentCard && (
                  <motion.div
                    key={`current-${currentCard.id}`}
                    initial={{ scale: 0.8, y: 50, opacity: 0 }}
                    animate={{ 
                      scale: 1, 
                      y: seenCards.length ? -(seenCards.length * 2) : 0, 
                      opacity: 1,
                      rotate: currentCard.rotation,
                    }}
                    transition={{ type: "spring", stiffness: 300, damping: 25 }}
                    className="relative select-none"
                    style={{ zIndex: seenCards.length + 1 }}
                  >
                    <img
                      src={currentCard.imagePath}
                      alt={`Card ${currentCard.id}`}
                      className="w-full max-w-[60vw] md:max-w-[50vw] max-h-[50vh] md:max-h-[60vh] object-contain rounded-[15px] shadow-lg select-none"
                      style={{
                        imageRendering: 'crisp-edges',
                        filter: 'contrast(1.1) saturate(1.05)',
                      }}
                      draggable="false"
                    />
                  </motion.div>
                )}
              </div>
            </CardContent>
          </CardUI>

          {/* Cork Button - positioned below the card area, aligned to left edge of cards */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="absolute bottom-[8%] left-1/2 -translate-x-1/2 w-full max-w-[60vw] md:max-w-[50vw] z-20"
          >
            <div className="flex justify-start">
              <button
                onClick={triggerConfetti}
                className="transition-all duration-300 hover:scale-110"
              >
                <img 
                  src={cork}
                  alt="Cork"
                  className="w-[40px] md:w-[60px] lg:w-[80px] opacity-30 hover:opacity-100 transition-all duration-300"
                />
              </button>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Mobile Navigation Buttons */}
      <div className="md:hidden fixed bottom-32 left-1/2 -translate-x-1/2 z-30 flex gap-8">
        <button
          onClick={handlePreviousCard}
          className={`bg-white/20 hover:bg-white/30 text-white rounded-full w-12 h-12 flex items-center justify-center transition-colors ${
            currentCardIndex === 0 ? 'opacity-50 cursor-not-allowed' : ''
          }`}
          disabled={currentCardIndex === 0}
        >
          ←
        </button>
        <button
          onClick={handleNextCard}
          className={`bg-white/20 hover:bg-white/30 text-white rounded-full w-12 h-12 flex items-center justify-center transition-colors ${
            currentCardIndex === cards.length - 1 ? 'opacity-50 cursor-not-allowed' : ''
          }`}
          disabled={currentCardIndex === cards.length - 1}
        >
          →
        </button>
      </div>

      {/* Card counter */}
      <div className="absolute top-2 md:top-4 right-2 md:right-4 text-white text-sm md:text-base">
        {currentCardIndex + 1} / {cards.length}
      </div>
    </motion.div>
  );
};